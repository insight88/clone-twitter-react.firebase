{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","components/Navigation.js","routes/Profile.js","components/Router.js","components/App.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","dbService","storageService","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","auth","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","faGithub","Tweet","tweetObj","isOwner","editing","setEditing","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","attachmentURL","toggleEditing","update","src","alt","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","attachment","setAttachment","attachmentRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createdAt","Date","now","creatorId","collection","add","maxLength","for","faPlus","accept","image","files","reader","FileReader","onloadend","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","snapshot","tweetArray","docs","map","data","marginTop","key","Navigation","display","justifyContent","to","marginRight","marginLeft","fontSize","flexDirection","alignItems","faUser","displayName","refreshUser","history","useHistory","newDisplayName","setNewDisplayName","updateProfile","autoFocus","signOut","push","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","Profile","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","getFullYear","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22661b2e.chunk.js","sourcesContent":["import * as firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\nimport 'firebase/storage';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGIN_ID,\r\n  appId: process.env.REACT_APP_APP_ID,\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\n\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageService = firebase.storage();\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useState } from 'react';\r\nimport { authService } from 'fbase';\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === 'email') {\r\n      setEmail(value);\r\n    } else if (name === 'password') {\r\n      setPassword(value);\r\n    }\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n  return (\r\n    <>\r\n      <form onSubmit={onSubmit} className=\"container\">\r\n        <input\r\n          name=\"email\"\r\n          type=\"email\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n          className=\"authInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          className=\"authInput authSubmit\"\r\n          value={newAccount ? 'Create Account' : 'Log In'}\r\n        />\r\n        {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n      <span onClick={toggleAccount} className=\"authSwitch\">\r\n        {newAccount ? 'Sign in' : 'Create Account'}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AuthForm;\r\n","/* eslint-disable no-unused-vars */\r\nimport React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport {\r\n  faTwitter,\r\n  faGoogle,\r\n  faGithub,\r\n} from '@fortawesome/free-brands-svg-icons';\r\nimport { authService, firebaseInstance } from 'fbase';\r\nimport AuthForm from 'components/AuthForm';\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === 'google') {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n      // * fbase.js에서 선언한 firebaseInstance를 사용\r\n      // ? Auth Provider는 authourized user 정보를 제공하는 서비스 provider (etc. google, github, facebook)\r\n    } else if (name === 'github') {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <FontAwesomeIcon\r\n        icon={faTwitter}\r\n        color={'#04AAFF'}\r\n        size=\"3x\"\r\n        style={{ marginBottom: 30 }}\r\n      />\r\n      <AuthForm />\r\n      <div className=\"authBtns\">\r\n        <button name=\"google\" onClick={onSocialClick} className=\"authBtn\">\r\n          Continue with Google <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button name=\"github\" onClick={onSocialClick} className=\"authBtn\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n","import { dbService, storageService } from 'fbase';\r\nimport React, { useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash, faPencilAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Tweet = ({ tweetObj, isOwner }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newTweet, setNewTweet] = useState(tweetObj.text);\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm('Are you sure? Delete?');\r\n    if (ok) {\r\n      await dbService.doc(`tweets/${tweetObj.id}`).delete();\r\n      // ? firestore.doc(\"path\") : path에 존재하는 DocumentReference Object를 가져옴\r\n      await storageService.refFromURL(tweetObj.attachmentURL).delete();\r\n      // ? refFromURL('path').delete() : path라는 절대 경로를 참조한 후 지움\r\n    }\r\n  };\r\n\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`tweets/${tweetObj.id}`).update({\r\n      text: newTweet,\r\n    });\r\n    setEditing(false);\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewTweet(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"tweet\">\r\n      {editing ? (\r\n        <>\r\n          <form onSubmit={onSubmit} className=\"container tweetEdit\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Edit your tweet\"\r\n              value={newTweet}\r\n              required\r\n              onChange={onChange}\r\n            />\r\n            <input type=\"submit\" value=\"Update Tweet\" className=\"formBtn\" />\r\n          </form>\r\n          <span onClick={toggleEditing} className=\"formBtn cancelBtn\">\r\n            Cancel\r\n          </span>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <h3>{tweetObj.text}</h3>\r\n          {tweetObj.attachmentURL && (\r\n            <img className=\"tweet__img\" src={tweetObj.attachmentURL} alt=\"\" />\r\n          )}\r\n          {isOwner && (\r\n            <div className=\"tweet__actions\">\r\n              <span onClick={onDeleteClick}>\r\n                <FontAwesomeIcon icon={faTrash} />\r\n              </span>\r\n              <span onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faPencilAlt} />\r\n              </span>\r\n            </div>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tweet;\r\n","import React, { useState } from 'react';\r\nimport { storageService, dbService } from 'fbase';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst TweetFactory = ({ userObj }) => {\r\n  const [tweet, setTweet] = useState('');\r\n  const [attachment, setAttachment] = useState('');\r\n  // * image 업로드 객체를 나타내는 attachment, image preview를 위한 state\r\n\r\n  const onSubmit = async (event) => {\r\n    if (tweet === '') {\r\n      return;\r\n    }\r\n    event.preventDefault();\r\n\r\n    let attachmentURL = '';\r\n    // ! 사진 업로드 없이 코멘트만 등록한 경우\r\n    if (attachment !== '') {\r\n      // ! 사진과 코멘트를 같이 등록한 경우\r\n      const attachmentRef = storageService\r\n        .ref()\r\n        .child(`${userObj.uid}/${uuidv4()}`);\r\n      // * ref().child('path') : ref로 부터의 상대 경로(path)를 return\r\n      // * uuidv4() : random id를 생성하는 함수\r\n      const response = await attachmentRef.putString(attachment, 'data_url');\r\n      // * putString(data, format) : format에 맞는 data 정보를 string으로 불러온다\r\n      attachmentURL = await response.ref.getDownloadURL();\r\n    } else {\r\n      attachmentURL =\r\n        'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcSyRE2zZSPgbJThiOrx55_b4yG-J1eyADnhKw&usqp=CAU';\r\n    }\r\n\r\n    const tweetObj = {\r\n      text: tweet,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      // * userObj.uid는 현재 코멘트를 submit한 user의 id를 나타냄\r\n      attachmentURL,\r\n    };\r\n    await dbService.collection('tweets').add(tweetObj);\r\n    // * firestore().collection(\"name\") ; name이라는 collection에 access\r\n    // * collection : db 폴더 이름, document : 각각의 data (firebase console -> cloud firestore)\r\n    // * add() : collection(\"name\")에 새로운 document를 추가\r\n    setTweet('');\r\n    setAttachment('');\r\n  };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setTweet(value);\r\n  };\r\n\r\n  const onFileChange = (event) => {\r\n    const {\r\n      target: { files },\r\n    } = event;\r\n    const image = files[0];\r\n    // * form input에 file을 업로드하면 event.target.files에 array로 저장된다\r\n    const reader = new FileReader();\r\n    // * FilreReader API를 활용\r\n    reader.onloadend = (finishedEvent) => {\r\n      const {\r\n        currentTarget: { result },\r\n      } = finishedEvent;\r\n      setAttachment(result);\r\n    };\r\n    reader.readAsDataURL(image);\r\n  };\r\n\r\n  const onClearPhotoClick = () => setAttachment('');\r\n\r\n  return (\r\n    <form onSubmit={onSubmit} className=\"factoryForm\">\r\n      <div className=\"factoryInput__container\">\r\n        <input\r\n          className=\"factoryInput__input\"\r\n          value={tweet}\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          placeholder=\"What's on your mind?\"\r\n          maxLength={120}\r\n        />\r\n        <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\r\n      </div>\r\n      <label for=\"attach-file\" className=\"factoryInput__label\">\r\n        <span>Add photos</span>\r\n        <FontAwesomeIcon icon={faPlus} />\r\n      </label>\r\n      <input\r\n        id=\"attach-file\"\r\n        type=\"file\"\r\n        accept=\"image/*\"\r\n        onChange={onFileChange}\r\n        style={{\r\n          opacity: 0,\r\n        }}\r\n      />\r\n      {attachment && (\r\n        // * attachment state !== null일 때, 이미지가 업로드 되었을 때 미리보기와 clear 버튼을 표시\r\n        <div className=\"factoryForm__attachment\">\r\n          <img\r\n            src={attachment}\r\n            style={{\r\n              backgroundImage: attachment,\r\n            }}\r\n            alt=\"\"\r\n          />\r\n          <div className=\"factoryForm__clear\" onClick={onClearPhotoClick}>\r\n            <span>Remove</span>\r\n            <FontAwesomeIcon icon={faTimes} />\r\n          </div>\r\n        </div>\r\n      )}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TweetFactory;\r\n","import { dbService } from 'fbase';\r\nimport React, { useState, useEffect } from 'react';\r\nimport Tweet from 'components/Tweet';\r\nimport TweetFactory from 'components/TweetFactory';\r\n\r\nconst Home = ({ userObj }) => {\r\n  // * App.js :onAuthStateChanged -> Router.js : AppRouter에서 userObj 전달 -> Home.js\r\n  const [tweets, setTweets] = useState([]);\r\n  // const getTweets = async () => {\r\n  //   const nt = await dbService.collection('tweets').get();\r\n  //   // * get() method는 collection의 QuerySnapshot을 return\r\n  //   nt.forEach((document) => {\r\n  //     const tweetObject = {\r\n  //       ...document.data(),\r\n  //       id: document.id,\r\n  //     };\r\n  //     setTweets((prev) => [tweetObject, ...prev]);\r\n  //   });\r\n  // };\r\n  // ! not real-time message displaying\r\n\r\n  useEffect(() => {\r\n    dbService.collection('tweets').onSnapshot((snapshot) => {\r\n      // ? collection().onSnapshot() : collection에 대한 event listening observer\r\n      // * event가 발생 시 callback을 실행한 후 결과를 return\r\n      const tweetArray = snapshot.docs.map((doc) => ({\r\n        id: doc.id,\r\n        ...doc.data(),\r\n      }));\r\n      setTweets(tweetArray);\r\n    });\r\n  }, []);\r\n  // ! real-time message displaying\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <TweetFactory userObj={userObj} />\r\n      <div style={{ marginTop: 30 }}>\r\n        {tweets.map((tweet) => (\r\n          <Tweet\r\n            key={tweet.id}\r\n            tweetObj={tweet}\r\n            isOwner={tweet.creatorId === userObj.uid}\r\n          />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTwitter } from '@fortawesome/free-brands-svg-icons';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Navigation = ({ userObj }) => (\r\n  <nav>\r\n    <ul style={{ display: 'flex', justifyContent: 'center', marginTop: 50 }}>\r\n      <li>\r\n        <Link to=\"/\" style={{ marginRight: 10 }}>\r\n          <FontAwesomeIcon icon={faTwitter} color={'#04AAFF'} size=\"2x\" />\r\n          <span\r\n            style={{\r\n              marginLeft: -5,\r\n              marginTop: 5,\r\n              display: 'block',\r\n              fontSize: '12.5px',\r\n            }}\r\n          >\r\n            Twitter\r\n          </span>\r\n        </Link>\r\n      </li>\r\n      <li>\r\n        <Link\r\n          to=\"/profile\"\r\n          style={{\r\n            marginLeft: 10,\r\n            display: 'flex',\r\n            flexDirection: 'column',\r\n            alignItems: 'center',\r\n            fontSize: 12,\r\n          }}\r\n        >\r\n          <FontAwesomeIcon icon={faUser} color={'#04AAFF'} size=\"2x\" />\r\n          <span style={{ marginTop: 10 }}>\r\n            {userObj.displayName ? `${userObj.displayName}` : 'Profile'}\r\n          </span>\r\n        </Link>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Navigation;\r\n","import React, { useState } from 'react';\r\nimport { authService } from 'fbase';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nexport default ({ refreshUser, userObj }) => {\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n\r\n  const onLogOutClick = () => {\r\n    authService.signOut();\r\n    history.push('/');\r\n  };\r\n  // const getMyTweets = async () => {\r\n  //   const tweets = await dbService\r\n  //     .collection('tweets')\r\n  //     .where('creatorId', '==', userObj.uid)\r\n  //     // * where(path, opStr, value) : value와 operation 조건을 만족하는 것들의 path로 이루어진 Query를 return\r\n  //     .orderBy('createdAt')\r\n  //     .get();\r\n  //   console.log(tweets.docs.map((doc) => doc.data()));\r\n  // };\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({\r\n        displayName: newDisplayName,\r\n      });\r\n      refreshUser();\r\n    }\r\n  };\r\n\r\n  // useEffect(() => {\r\n  //   getMyTweets();\r\n  // }, [getMyTweets]);\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit} className=\"profileForm\">\r\n        <input\r\n          onChange={onChange}\r\n          type=\"text\"\r\n          autoFocus\r\n          className=\"formInput\"\r\n        />\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Update Profile\"\r\n          className=\"formBtn\"\r\n          style={{\r\n            marginTop: 10,\r\n          }}\r\n        />\r\n      </form>\r\n      <button className=\"formBtn cancelBtn logOut\" onClick={onLogOutClick}>\r\n        Log Out\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport Auth from 'routes/Auth';\r\nimport Home from 'routes/Home';\r\nimport Navigation from 'components/Navigation';\r\nimport Profile from 'routes/Profile';\r\n\r\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\r\n  return (\r\n    <Router>\r\n      {isLoggedIn && <Navigation userObj={userObj} />}\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <div\r\n            style={{\r\n              maxWidth: 890,\r\n              width: '100%',\r\n              margin: '0 auto',\r\n              marginTop: 80,\r\n              display: 'flex',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            <Route exact path=\"/\">\r\n              <Home userObj={userObj} />\r\n            </Route>\r\n            <Route exact path=\"/profile\">\r\n              <Profile userObj={userObj} refreshUser={refreshUser} />\r\n            </Route>\r\n          </div>\r\n        ) : (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Auth />\r\n            </Route>\r\n          </>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\nexport default AppRouter;\r\n","/* eslint-disable no-unused-vars */\r\nimport React, { useState, useEffect } from 'react';\r\nimport AppRouter from 'components/Router';\r\nimport { authService } from 'fbase';\r\n\r\nfunction App() {\r\n  const [init, setInit] = useState(false);\r\n  const [userObj, setUserObj] = useState(null);\r\n\r\n  useEffect(() => {\r\n    authService.onAuthStateChanged((user) => {\r\n      // ? onAuthStateChanged() : Adds an observer for changes to the user's sign-in state\r\n      if (user) {\r\n        setUserObj({\r\n          displayName: user.displayName,\r\n          uid: user.uid,\r\n          updateProfile: (args) => user.updateProfile(args),\r\n        });\r\n      } else {\r\n        setUserObj(null);\r\n      }\r\n      setInit(true);\r\n    });\r\n  }, []);\r\n  const refreshUser = () => {\r\n    const user = authService.currentUser;\r\n    setUserObj({\r\n      displayName: user.displayName,\r\n      uid: user.uid,\r\n      updateProfile: (args) => user.updateProfile(args),\r\n    });\r\n  };\r\n  return (\r\n    <>\r\n      {init ? (\r\n        <AppRouter\r\n          refreshUser={refreshUser}\r\n          isLoggedIn={Boolean(userObj)}\r\n          userObj={userObj}\r\n        />\r\n      ) : (\r\n        'Initializing...'\r\n      )}\r\n      <footer>&copy; {new Date().getFullYear()} Twitter Clone</footer>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'components/App';\nimport './styles.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}